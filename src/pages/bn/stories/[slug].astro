---
import { changeLanguage } from 'i18next';
import Layout from '@/layouts/Layout.astro';
import type { IStory, MetadataItem } from '@/types';
import { fetchRowsFromDatabase } from '@/utils/baserow';

changeLanguage('en');

export async function getStaticPaths() {
  const baserowData = await fetchRowsFromDatabase(
    '&sources__join=author&related_wikidata__join=type',
  );
  const baserowResult = await baserowData.results;
  const stories: Array<{
    frontmatter: IStory;
    default: any;
  }> = Object.values(import.meta.glob('@/stories/bn/*.md', { eager: true }));
  return stories.map((story) => ({
    params: { slug: story.frontmatter.slug },
    props: {
      story,
      baserow:
        baserowResult.find(
          (item: MetadataItem) => item.slug === story.frontmatter.slug,
        ) ?? null,
    },
  }));
}
const { story, baserow } = Astro.props;
const { frontmatter, default: Content } = story;
const currentUrl = Astro.url.href;
---

<Layout
  title={`${frontmatter.title} - Stories | Otibeguni `}
  schema={{
    '@context': 'https://schema.org',
    '@type': 'Book',
    name: frontmatter.title,
    author: frontmatter.source,
    url: currentUrl,
  }}
>
  <article class="prose mx-auto max-w-3xl px-4 py-12">
    <h1 class="mb-4 text-5xl leading-16">{frontmatter.title}</h1>
    <span class="badge badge-soft badge-primary">
      {frontmatter.category}
    </span>

    <div class="divider"></div>

    <h1 class="text-3xl">Plot Summary</h1>
    <Content />

    {
      baserow?.sources && (
        <div class="py-8">
          <h1 class="text-3xl">Sources</h1>
          <div class="grid grid-cols-1 gap-5 md:grid-cols-2 lg:grid-cols-3">
            {baserow.sources.map((source) => (
              <div class="card bg-base-100 card-md shadow-sm">
                <div class="card-body">
                  <div class="flex flex-col gap-4">
                    <div class="flex flex-col">
                      <span class="text-xs font-bold">Source</span>
                      {source.value}
                    </div>
                    <div class="flex flex-col">
                      <span class="text-xs font-bold">Author</span>
                      {source.author}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      baserow?.related_wikidata && (
        <>
          <h1 class="pt-8 text-3xl">Related Topics</h1>
          <div class="grid grid-cols-1 gap-5 md:grid-cols-2 lg:grid-cols-3">
            {baserow.related_wikidata.map((item) => (
              <div class="card bg-base-100 card-md shadow-sm">
                <div class="card-body">
                  <div class="flex flex-col gap-4">
                    <div class="flex flex-col">
                      <span class="text-xs font-bold">Topic</span>
                      {item.value}
                    </div>
                    <div class="flex flex-col">
                      <span class="text-xs font-bold">Type</span>
                      {item.type}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </>
      )
    }
  </article>
</Layout>
